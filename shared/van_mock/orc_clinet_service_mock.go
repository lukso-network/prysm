// Code generated by MockGen. DO NOT EDIT.
// Source: ../../beacon-chain/blockchain/van_process_pending_blocks.go

// Package van_mock is a generated GoMock package.
package van_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	eth "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1"
	params "github.com/prysmaticlabs/prysm/shared/params"
	reflect "reflect"
)

// MockOrcClient is a mock of OrcClient interface
type MockOrcClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrcClientMockRecorder
}

// MockOrcClientMockRecorder is the mock recorder for MockOrcClient
type MockOrcClientMockRecorder struct {
	mock *MockOrcClient
}

// NewMockOrcClient creates a new mock instance
func NewMockOrcClient(ctrl *gomock.Controller) *MockOrcClient {
	mock := &MockOrcClient{ctrl: ctrl}
	mock.recorder = &MockOrcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrcClient) EXPECT() *MockOrcClientMockRecorder {
	return m.recorder
}

// ConfirmVanBlockHashes mocks base method
func (m *MockOrcClient) ConfirmVanBlockHashes(ctx context.Context, request []*params.ConfirmationReqData) ([]*params.ConfirmationResData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmVanBlockHashes", ctx, request)
	ret0, _ := ret[0].([]*params.ConfirmationResData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmVanBlockHashes indicates an expected call of ConfirmVanBlockHashes
func (mr *MockOrcClientMockRecorder) ConfirmVanBlockHashes(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmVanBlockHashes", reflect.TypeOf((*MockOrcClient)(nil).ConfirmVanBlockHashes), ctx, request)
}

// MockPendingBlocksFetcher is a mock of PendingBlocksFetcher interface
type MockPendingBlocksFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockPendingBlocksFetcherMockRecorder
}

// MockPendingBlocksFetcherMockRecorder is the mock recorder for MockPendingBlocksFetcher
type MockPendingBlocksFetcherMockRecorder struct {
	mock *MockPendingBlocksFetcher
}

// NewMockPendingBlocksFetcher creates a new mock instance
func NewMockPendingBlocksFetcher(ctrl *gomock.Controller) *MockPendingBlocksFetcher {
	mock := &MockPendingBlocksFetcher{ctrl: ctrl}
	mock.recorder = &MockPendingBlocksFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPendingBlocksFetcher) EXPECT() *MockPendingBlocksFetcherMockRecorder {
	return m.recorder
}

// SortedUnConfirmedBlocksFromCache mocks base method
func (m *MockPendingBlocksFetcher) SortedUnConfirmedBlocksFromCache() ([]*eth.BeaconBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortedUnConfirmedBlocksFromCache")
	ret0, _ := ret[0].([]*eth.BeaconBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortedUnConfirmedBlocksFromCache indicates an expected call of SortedUnConfirmedBlocksFromCache
func (mr *MockPendingBlocksFetcherMockRecorder) SortedUnConfirmedBlocksFromCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortedUnConfirmedBlocksFromCache", reflect.TypeOf((*MockPendingBlocksFetcher)(nil).SortedUnConfirmedBlocksFromCache))
}
